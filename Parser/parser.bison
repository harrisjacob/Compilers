
/*
Declare token types at the top of the bison file,
causing them to be automatically generated in parser.tab.h
for use by scanner.c.
*/

	%token TOKEN_EOF
	%token TOKEN_ARRAY
	%token TOKEN_ELSE
	%token TOKEN_FALSE
	%token TOKEN_FOR
	%token TOKEN_FUNCTION
	%token TOKEN_IF
	%token TOKEN_PRINT
	%token TOKEN_RETURN
	%token TOKEN_TRUE
	%token TOKEN_VOID
	%token TOKEN_WHILE
	%token TOKEN_INTEGER
	%token TOKEN_BOOLEAN
	%token TOKEN_CHARACTER
	%token TOKEN_STRING
	%token TOKEN_INTEGER_LITERAL
	%token TOKEN_CHARACTER_LITERAL
	%token TOKEN_STRING_LITERAL
	%token TOKEN_IDENTIFIER
	%token TOKEN_L_PAREN
	%token TOKEN_R_PAREN
	%token TOKEN_L_SUB
	%token TOKEN_R_SUB
	%token TOKEN_POST_INC
	%token TOKEN_POST_DEC
	%token TOKEN_UNARY_NEG
	%token TOKEN_LOGIC_NOT
	%token TOKEN_EXP
	%token TOKEN_MULT
	%token TOKEN_DIVIDE
	%token TOKEN_MOD
	%token TOKEN_ADD
	%token TOKEN_SUB
	%token TOKEN_LT
	%token TOKEN_LE
	%token TOKEN_GT
	%token TOKEN_GE
	%token TOKEN_EQUIV
	%token TOKEN_NOT_EQUIV
	%token TOKEN_LOGIC_AND
	%token TOKEN_LOGIC_OR
	%token TOKEN_ASSIGNMENT
	%token TOKEN_SEMICOLON
	%token TOKEN_COLON
	%token TOKEN_COMMA
	%token TOKEN_L_CURLY
	%token TOKEN_R_CURLY
	%token TOKEN_BACKSLASH
	%token TOKEN_ERROR

%{

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

/*
Clunky: Manually declare the interface to the scanner generated by flex. 
*/

extern char *yytext;
extern int yylex();
extern int yyerror( char *str );
extern int parser_result;
%}

%%

/* Here is the grammar: program is the start symbol. */

program : expr TOKEN_SEMICOLON { parser_result = $1; return 0; }
		;

expr	: expr TOKEN_ADD factor 			{$$ = $1 + $3;}
		| expr TOKEN_SUB factor				{$$ = $1 - $3;}
		| factor							{$$ = $1;}
		;

factor	: factor TOKEN_MULT term			{$$ = $1 * $3;}
		| factor TOKEN_DIVIDE term			{$$ = $1 / $3;}
		| term								{$$ = $1;}
		;

term	: TOKEN_SUB term					{$$ = -$2;}
		| TOKEN_L_PAREN expr TOKEN_R_PAREN	{$$ = $2;}
		| TOKEN_INTEGER_LITERAL				{$$ = atoi(yytext);}
		| TOKEN_IDENTIFIER					{$$ = 23;}
		;

%%

/*
This function will be called by bison if the parse should
encounter an error.  In principle, "str" will contain something
useful.  In practice, it often does not.
*/

int yyerror( char *str )
{
	printf("parse error: %s\n",str);
	return 0;
}
